{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 4,
  "links": [
    {
      "asDropdown": false,
      "icon": "external link",
      "includeVars": true,
      "keepTime": true,
      "tags": [
        "perf"
      ],
      "targetBlank": false,
      "title": "Dashboards",
      "tooltip": "",
      "type": "dashboards",
      "url": ""
    }
  ],
  "panels": [
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "panels": [],
      "title": "Overview",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${source}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 1
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${source}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE $__timeFilter(collected_at)\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL '$__interval', collected_at) AS bucket,\n    queryid,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nexpanded AS (\n  SELECT\n    bucket,\n    delta_calls,\n    (delta_total_time / NULLIF(delta_calls, 0)::double precision) AS per_call_latency,\n    (delta_blk_read_time + delta_blk_write_time) / NULLIF(delta_calls, 0)::double precision AS per_call_io_time\n  FROM deltas\n  WHERE delta_calls > 0 AND delta_total_time >= 0\n),\naggregated AS (\n  SELECT\n    bucket,\n    percentile_agg(per_call_latency) AS latency_percentiles,\n    avg(per_call_io_time) AS avg_io\n  FROM expanded\n  GROUP BY bucket\n)\nSELECT\n  bucket,\n  approx_percentile(0.5, latency_percentiles) AS \"Median time\",\n  approx_percentile(0.95, latency_percentiles) AS \"P95 time\",\n  avg_io AS \"Avg I/O time\"\nFROM aggregated\nORDER BY bucket;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Query runtime",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${source}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "decimals": 2,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Avg time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              },
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% of all I/O"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "% of all runtime"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Calls/min"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Query"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "left"
              },
              {
                "id": "custom.inspect",
                "value": true
              },
              {
                "id": "links",
                "value": [
                  {
                    "title": "Show details",
                    "url": "/d/${__dashboard.uid}/${__dashboard}?var-queryid=${__data.fields.queryid}&var-query=${__data.fields.Query}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "queryid"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              },
              {
                "id": "decimals",
                "value": 0
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 15,
        "w": 24,
        "x": 0,
        "y": 9
      },
      "id": 2,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Avg time"
          }
        ]
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${source}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid::text,\n    MAX(query) AS query,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE $__timeFilter(collected_at)\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    queryid,\n    query,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nfiltered AS (\n  SELECT *\n  FROM deltas\n  WHERE delta_calls > 0 AND delta_total_time > 0\n),\ntotals AS (\n  SELECT\n    SUM(delta_total_time) AS total_runtime,\n    SUM(delta_blk_read_time + delta_blk_write_time) AS total_io\n  FROM filtered\n)\nSELECT\n  queryid,\n  MAX(query) AS \"Query\",\n  SUM(delta_total_time) / NULLIF(SUM(delta_calls), 0) AS \"Avg time\",\n  SUM(delta_calls)::numeric / COUNT(*) AS \"Calls/min\",\n  SUM(delta_blk_read_time + delta_blk_write_time) * 100.0 / NULLIF(t.total_io, 0) AS \"% of all I/O\",\n  SUM(delta_total_time) * 100.0 / NULLIF(t.total_runtime, 0) AS \"% of all runtime\"\nFROM filtered\nJOIN totals t ON true\nGROUP BY queryid, t.total_io, t.total_runtime\nORDER BY \"% of all runtime\" DESC\nLIMIT 100;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "",
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 24
      },
      "id": 4,
      "panels": [],
      "title": "Query performance: #$queryid",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${source}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "ms"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Calls"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 25
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${source}"
          },
          "editorMode": "code",
          "format": "time_series",
          "rawQuery": true,
          "rawSql": "WITH pre_aggregated AS (\n  SELECT\n    time_bucket(INTERVAL '$__interval', collected_at) AS bucket,\n    collected_at,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE queryid = $queryid AND $__timeFilter(collected_at)\n  GROUP BY collected_at\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL '$__interval', collected_at) AS bucket,\n    calls - LAG(calls) OVER (ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nfiltered AS (\n  SELECT *\n  FROM deltas\n  WHERE delta_calls > 0 AND delta_total_time >= 0\n)\nSELECT\n  bucket AS time,\n  SUM(delta_total_time) / NULLIF(SUM(delta_calls), 0) AS \"Avg total time\",\n  SUM(delta_blk_read_time + delta_blk_write_time) AS \"Avg I/O time\",\n  SUM(delta_calls) AS \"Calls\"\nFROM filtered\nGROUP BY bucket\nORDER BY bucket;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Avg time & calls",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${source}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "axisSoftMax": 100,
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Bytes read from disk per call"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decbytes"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 31
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${source}"
          },
          "editorMode": "code",
          "format": "time_series",
          "rawQuery": true,
          "rawSql": "WITH deltas AS (\n  SELECT\n    time_bucket(INTERVAL '$__interval', collected_at) AS bucket,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time,\n    shared_blks_hit - LAG(shared_blks_hit) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_shared_blks_hit,\n    shared_blks_read - LAG(shared_blks_read) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_shared_blks_read\n  FROM pganalyze.stat_statements\n  WHERE queryid = $queryid AND $__timeFilter(collected_at)\n),\nfiltered AS (\n  SELECT *\n  FROM deltas\n  WHERE delta_calls > 0 AND delta_total_time >= 0\n)\nSELECT\n  bucket AS time,\n  \n  -- Calculate % from buffer cache (cache hits)\n  CASE WHEN SUM(delta_shared_blks_hit + delta_shared_blks_read) > 0\n       THEN 100.0 * SUM(delta_shared_blks_hit)::float / SUM(delta_shared_blks_hit + delta_shared_blks_read)\n       ELSE NULL\n  END AS \"Percent from buffer cache\",\n\n  -- % from disk (reads)\n  CASE WHEN SUM(delta_shared_blks_hit + delta_shared_blks_read) > 0\n       THEN 100.0 * SUM(delta_shared_blks_read)::float / SUM(delta_shared_blks_hit + delta_shared_blks_read)\n       ELSE NULL\n  END AS \"Percent from disk\",\n\n  -- Bytes read from disk per call (blocks * 8KB)\n  CASE WHEN SUM(delta_calls) > 0\n       THEN (SUM(delta_shared_blks_read) * 8192)::float / SUM(delta_calls)\n       ELSE NULL\n  END AS \"Bytes read from disk per call\"\n\nFROM filtered\nGROUP BY bucket\nORDER BY bucket;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Cache hit ratio",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 37
      },
      "id": 9,
      "panels": [],
      "title": "SQL statement for #$queryid",
      "type": "row"
    },
    {
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 38
      },
      "id": 7,
      "options": {
        "code": {
          "language": "sql",
          "showLineNumbers": true,
          "showMiniMap": false
        },
        "content": "${query:raw}",
        "mode": "code"
      },
      "pluginVersion": "12.1.0",
      "title": "",
      "type": "text"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 49
      },
      "id": 10,
      "panels": [],
      "title": "EXPLAINs: #$queryid [only if duration > 1000ms]",
      "type": "row"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "${source}"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "plan"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Executed at"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "title": "Show json plan",
                    "url": "/d/${__dashboard.uid}/${__dashboard}?var-queryid=${__data.fields.queryid}&var-plan=${__data.fields.plan}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Runtime"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "I/O read time"
            },
            "properties": [
              {
                "id": "unit",
                "value": "ms"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "I/O read time %"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Read from disk"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "queryid"
            },
            "properties": [
              {
                "id": "custom.hidden",
                "value": true
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 50
      },
      "id": 8,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${source}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT time AS \"Executed at\",\ntotal_cost AS \"Est. cost\",\nduration AS \"Runtime\",\nio_read_time AS \"I/O read time\",\nio_read_time / duration * 100.0 AS \"I/O read time %\",\nbytes_read AS \"Read from disk\",\nqueryid::text,\nplan\nFROM pganalyze.stat_explains\nWHERE queryid = $queryid \nORDER BY time DESC\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "EXPLAIN plans",
      "type": "table"
    },
    {
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 15,
        "w": 13,
        "x": 0,
        "y": 57
      },
      "id": 11,
      "links": [
        {
          "targetBlank": true,
          "title": "Analyze EXPLAIN in Depesz",
          "url": "https://explain.depesz.com/"
        },
        {
          "targetBlank": true,
          "title": "Analyze EXPLAIN in Dalibo",
          "url": "https://explain.dalibo.com/"
        },
        {
          "targetBlank": true,
          "title": "Index Advisor (pganalyze)",
          "url": "https://pganalyze.com/index-advisor"
        }
      ],
      "options": {
        "code": {
          "language": "json",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "$plan",
        "mode": "code"
      },
      "pluginVersion": "12.1.0",
      "title": "Plan",
      "type": "text"
    }
  ],
  "preload": false,
  "schemaVersion": 41,
  "tags": [
    "perf"
  ],
  "templating": {
    "list": [
      {
        "allowCustomValue": false,
        "current": {
          "text": "tem",
          "value": "P1F7BE6908B217B4A"
        },
        "label": "Database",
        "name": "source",
        "options": [],
        "query": "grafana-postgresql-datasource",
        "refresh": 1,
        "regex": "",
        "type": "datasource"
      },
      {
        "current": {
          "text": "-6818636805151468009",
          "value": "-6818636805151468009"
        },
        "hide": 2,
        "name": "queryid",
        "options": [
          {
            "selected": true,
            "text": "-6818636805151468009",
            "value": "-6818636805151468009"
          }
        ],
        "query": "-6818636805151468009",
        "type": "textbox"
      },
      {
        "current": {
          "text": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE collected_at BETWEEN $1 AND $2\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL $3, collected_at) AS bucket,\n    queryid,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nexpanded AS (\n  SELECT\n    bucket,\n    delta_calls,\n    (delta_total_time / NULLIF(delta_calls, $4)::double precision) AS per_call_latency,\n    (delta_blk_read_time   delta_blk_write_time) / NULLIF(delta_calls, $5)::double precision AS per_call_io_time\n  FROM deltas\n  WHERE delta_calls > $6 AND delta_total_time >= $7\n),\naggregated AS (\n  SELECT\n    bucket,\n    percentile_agg(per_call_latency) AS latency_percentiles,\n    avg(per_call_io_time) AS avg_io\n  FROM expanded\n  GROUP BY bucket\n)\nSELECT\n  bucket,\n  approx_percentile($8, latency_percentiles) AS \"Median time\",\n  approx_percentile($9, latency_percentiles) AS \"P95 time\",\n  avg_io AS \"Avg I/O time\"\nFROM aggregated\nORDER BY bucket",
          "value": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE collected_at BETWEEN $1 AND $2\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL $3, collected_at) AS bucket,\n    queryid,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nexpanded AS (\n  SELECT\n    bucket,\n    delta_calls,\n    (delta_total_time / NULLIF(delta_calls, $4)::double precision) AS per_call_latency,\n    (delta_blk_read_time   delta_blk_write_time) / NULLIF(delta_calls, $5)::double precision AS per_call_io_time\n  FROM deltas\n  WHERE delta_calls > $6 AND delta_total_time >= $7\n),\naggregated AS (\n  SELECT\n    bucket,\n    percentile_agg(per_call_latency) AS latency_percentiles,\n    avg(per_call_io_time) AS avg_io\n  FROM expanded\n  GROUP BY bucket\n)\nSELECT\n  bucket,\n  approx_percentile($8, latency_percentiles) AS \"Median time\",\n  approx_percentile($9, latency_percentiles) AS \"P95 time\",\n  avg_io AS \"Avg I/O time\"\nFROM aggregated\nORDER BY bucket"
        },
        "hide": 2,
        "name": "query",
        "options": [
          {
            "selected": true,
            "text": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE collected_at BETWEEN $1 AND $2\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL $3, collected_at) AS bucket,\n    queryid,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nexpanded AS (\n  SELECT\n    bucket,\n    delta_calls,\n    (delta_total_time / NULLIF(delta_calls, $4)::double precision) AS per_call_latency,\n    (delta_blk_read_time   delta_blk_write_time) / NULLIF(delta_calls, $5)::double precision AS per_call_io_time\n  FROM deltas\n  WHERE delta_calls > $6 AND delta_total_time >= $7\n),\naggregated AS (\n  SELECT\n    bucket,\n    percentile_agg(per_call_latency) AS latency_percentiles,\n    avg(per_call_io_time) AS avg_io\n  FROM expanded\n  GROUP BY bucket\n)\nSELECT\n  bucket,\n  approx_percentile($8, latency_percentiles) AS \"Median time\",\n  approx_percentile($9, latency_percentiles) AS \"P95 time\",\n  avg_io AS \"Avg I/O time\"\nFROM aggregated\nORDER BY bucket",
            "value": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE collected_at BETWEEN $1 AND $2\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL $3, collected_at) AS bucket,\n    queryid,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nexpanded AS (\n  SELECT\n    bucket,\n    delta_calls,\n    (delta_total_time / NULLIF(delta_calls, $4)::double precision) AS per_call_latency,\n    (delta_blk_read_time   delta_blk_write_time) / NULLIF(delta_calls, $5)::double precision AS per_call_io_time\n  FROM deltas\n  WHERE delta_calls > $6 AND delta_total_time >= $7\n),\naggregated AS (\n  SELECT\n    bucket,\n    percentile_agg(per_call_latency) AS latency_percentiles,\n    avg(per_call_io_time) AS avg_io\n  FROM expanded\n  GROUP BY bucket\n)\nSELECT\n  bucket,\n  approx_percentile($8, latency_percentiles) AS \"Median time\",\n  approx_percentile($9, latency_percentiles) AS \"P95 time\",\n  avg_io AS \"Avg I/O time\"\nFROM aggregated\nORDER BY bucket"
          }
        ],
        "query": "WITH pre_aggregated AS (\n  SELECT\n    collected_at,\n    queryid,\n    SUM(calls) AS calls,\n    SUM(total_time) AS total_time,\n    SUM(blk_read_time) AS blk_read_time,\n    SUM(blk_write_time) AS blk_write_time\n  FROM pganalyze.stat_statements\n  WHERE collected_at BETWEEN $1 AND $2\n  GROUP BY collected_at, queryid\n),\ndeltas AS (\n  SELECT\n    time_bucket(INTERVAL $3, collected_at) AS bucket,\n    queryid,\n    calls - LAG(calls) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_calls,\n    total_time - LAG(total_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_total_time,\n    blk_read_time - LAG(blk_read_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_read_time,\n    blk_write_time - LAG(blk_write_time) OVER (PARTITION BY queryid ORDER BY collected_at) AS delta_blk_write_time\n  FROM pre_aggregated\n),\nexpanded AS (\n  SELECT\n    bucket,\n    delta_calls,\n    (delta_total_time / NULLIF(delta_calls, $4)::double precision) AS per_call_latency,\n    (delta_blk_read_time   delta_blk_write_time) / NULLIF(delta_calls, $5)::double precision AS per_call_io_time\n  FROM deltas\n  WHERE delta_calls > $6 AND delta_total_time >= $7\n),\naggregated AS (\n  SELECT\n    bucket,\n    percentile_agg(per_call_latency) AS latency_percentiles,\n    avg(per_call_io_time) AS avg_io\n  FROM expanded\n  GROUP BY bucket\n)\nSELECT\n  bucket,\n  approx_percentile($8, latency_percentiles) AS \"Median time\",\n  approx_percentile($9, latency_percentiles) AS \"P95 time\",\n  avg_io AS \"Avg I/O time\"\nFROM aggregated\nORDER BY bucket",
        "type": "textbox"
      },
      {
        "current": {
          "text": "{\"Plan\": {\"Plans\": [{\"Alias\": \"s\", \"Output\": [\"i\"], \"Schema\": \"pg_catalog\", \"Node Type\": \"Function Scan\", \"Plan Rows\": 30000000, \"Plan Width\": 4, \"Total Cost\": 300000.00, \"Actual Rows\": 30000000, \"Actual Loops\": 1, \"Startup Cost\": 0.00, \"Async Capable\": false, \"Function Call\": \"generate_series(1, 30000000)\", \"Function Name\": \"generate_series\", \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Parent Relationship\": \"Outer\", \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}], \"Output\": [\"sum(sqrt((i)::double precision))\"], \"Strategy\": \"Plain\", \"Node Type\": \"Aggregate\", \"Plan Rows\": 1, \"Plan Width\": 8, \"Total Cost\": 525000.01, \"Actual Rows\": 1, \"Actual Loops\": 1, \"Partial Mode\": \"Simple\", \"Startup Cost\": 525000.00, \"Async Capable\": false, \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}, \"Triggers\": [], \"Query Text\": \"SELECT sum(sqrt(i::float)) FROM generate_series(1, 30000000) AS s(i);\", \"Query Identifier\": 7609564340969411351}",
          "value": "{\"Plan\": {\"Plans\": [{\"Alias\": \"s\", \"Output\": [\"i\"], \"Schema\": \"pg_catalog\", \"Node Type\": \"Function Scan\", \"Plan Rows\": 30000000, \"Plan Width\": 4, \"Total Cost\": 300000.00, \"Actual Rows\": 30000000, \"Actual Loops\": 1, \"Startup Cost\": 0.00, \"Async Capable\": false, \"Function Call\": \"generate_series(1, 30000000)\", \"Function Name\": \"generate_series\", \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Parent Relationship\": \"Outer\", \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}], \"Output\": [\"sum(sqrt((i)::double precision))\"], \"Strategy\": \"Plain\", \"Node Type\": \"Aggregate\", \"Plan Rows\": 1, \"Plan Width\": 8, \"Total Cost\": 525000.01, \"Actual Rows\": 1, \"Actual Loops\": 1, \"Partial Mode\": \"Simple\", \"Startup Cost\": 525000.00, \"Async Capable\": false, \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}, \"Triggers\": [], \"Query Text\": \"SELECT sum(sqrt(i::float)) FROM generate_series(1, 30000000) AS s(i);\", \"Query Identifier\": 7609564340969411351}"
        },
        "hide": 2,
        "name": "plan",
        "options": [
          {
            "selected": true,
            "text": "{\"Plan\": {\"Plans\": [{\"Alias\": \"s\", \"Output\": [\"i\"], \"Schema\": \"pg_catalog\", \"Node Type\": \"Function Scan\", \"Plan Rows\": 30000000, \"Plan Width\": 4, \"Total Cost\": 300000.00, \"Actual Rows\": 30000000, \"Actual Loops\": 1, \"Startup Cost\": 0.00, \"Async Capable\": false, \"Function Call\": \"generate_series(1, 30000000)\", \"Function Name\": \"generate_series\", \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Parent Relationship\": \"Outer\", \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}], \"Output\": [\"sum(sqrt((i)::double precision))\"], \"Strategy\": \"Plain\", \"Node Type\": \"Aggregate\", \"Plan Rows\": 1, \"Plan Width\": 8, \"Total Cost\": 525000.01, \"Actual Rows\": 1, \"Actual Loops\": 1, \"Partial Mode\": \"Simple\", \"Startup Cost\": 525000.00, \"Async Capable\": false, \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}, \"Triggers\": [], \"Query Text\": \"SELECT sum(sqrt(i::float)) FROM generate_series(1, 30000000) AS s(i);\", \"Query Identifier\": 7609564340969411351}",
            "value": "{\"Plan\": {\"Plans\": [{\"Alias\": \"s\", \"Output\": [\"i\"], \"Schema\": \"pg_catalog\", \"Node Type\": \"Function Scan\", \"Plan Rows\": 30000000, \"Plan Width\": 4, \"Total Cost\": 300000.00, \"Actual Rows\": 30000000, \"Actual Loops\": 1, \"Startup Cost\": 0.00, \"Async Capable\": false, \"Function Call\": \"generate_series(1, 30000000)\", \"Function Name\": \"generate_series\", \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Parent Relationship\": \"Outer\", \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}], \"Output\": [\"sum(sqrt((i)::double precision))\"], \"Strategy\": \"Plain\", \"Node Type\": \"Aggregate\", \"Plan Rows\": 1, \"Plan Width\": 8, \"Total Cost\": 525000.01, \"Actual Rows\": 1, \"Actual Loops\": 1, \"Partial Mode\": \"Simple\", \"Startup Cost\": 525000.00, \"Async Capable\": false, \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}, \"Triggers\": [], \"Query Text\": \"SELECT sum(sqrt(i::float)) FROM generate_series(1, 30000000) AS s(i);\", \"Query Identifier\": 7609564340969411351}"
          }
        ],
        "query": "{\"Plan\": {\"Plans\": [{\"Alias\": \"s\", \"Output\": [\"i\"], \"Schema\": \"pg_catalog\", \"Node Type\": \"Function Scan\", \"Plan Rows\": 30000000, \"Plan Width\": 4, \"Total Cost\": 300000.00, \"Actual Rows\": 30000000, \"Actual Loops\": 1, \"Startup Cost\": 0.00, \"Async Capable\": false, \"Function Call\": \"generate_series(1, 30000000)\", \"Function Name\": \"generate_series\", \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Parent Relationship\": \"Outer\", \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}], \"Output\": [\"sum(sqrt((i)::double precision))\"], \"Strategy\": \"Plain\", \"Node Type\": \"Aggregate\", \"Plan Rows\": 1, \"Plan Width\": 8, \"Total Cost\": 525000.01, \"Actual Rows\": 1, \"Actual Loops\": 1, \"Partial Mode\": \"Simple\", \"Startup Cost\": 525000.00, \"Async Capable\": false, \"Parallel Aware\": false, \"Local Hit Blocks\": 0, \"Temp Read Blocks\": 51270, \"Local Read Blocks\": 0, \"Shared Hit Blocks\": 0, \"Shared Read Blocks\": 0, \"Temp I/O Read Time\": 69.213, \"Local I/O Read Time\": 0.000, \"Temp I/O Write Time\": 212.066, \"Temp Written Blocks\": 51270, \"Local Dirtied Blocks\": 0, \"Local I/O Write Time\": 0.000, \"Local Written Blocks\": 0, \"Shared I/O Read Time\": 0.000, \"Shared Dirtied Blocks\": 0, \"Shared I/O Write Time\": 0.000, \"Shared Written Blocks\": 0}, \"Triggers\": [], \"Query Text\": \"SELECT sum(sqrt(i::float)) FROM generate_series(1, 30000000) AS s(i);\", \"Query Identifier\": 7609564340969411351}",
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "Europe/London",
  "title": "Queries",
  "uid": "f5f755f6-d55b-4f89-bfd7-36281dc0eec7",
  "version": 5
}