#!/bin/bash
set -e

psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
    CREATE DATABASE tem;
    CREATE DATABASE sem;
    CREATE ROLE grafana WITH LOGIN PASSWORD '${POSTGRES_GRAFANA_PASSWORD}';
    GRANT pg_stat_scan_tables TO grafana;
    GRANT pg_read_all_stats TO grafana;
EOSQL

for db in tem sem; do
  echo "Creating initial db structure for: $db"
  psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname="$db" <<-EOSQL
      CREATE EXTENSION IF NOT EXISTS timescaledb;
      CREATE EXTENSION IF NOT EXISTS timescaledb_toolkit;
      CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
      CREATE EXTENSION IF NOT EXISTS pgstattuple;

      CREATE TABLE IF NOT EXISTS instruments (
          id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          instrument TEXT NOT NULL UNIQUE,
          serial INTEGER NOT NULL UNIQUE,
          model TEXT NOT NULL,
          name TEXT NOT NULL,
          template TEXT NOT NULL,
          server TEXT NOT NULL
      );

      CREATE TABLE IF NOT EXISTS enumerations (
          id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          instrument_id INTEGER NOT NULL REFERENCES instruments(id),
          enum_id INTEGER NOT NULL,
          enum TEXT NOT NULL,
          name TEXT NOT NULL,
          value INTEGER NOT NULL,
          UNIQUE (instrument_id, enum, value)
      );

      CREATE INDEX ON enumerations (instrument_id, enum, value);

      CREATE TABLE IF NOT EXISTS parameters (
          id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          instrument_id INTEGER NOT NULL REFERENCES instruments(id),
          param_id INTEGER NOT NULL,
          subsystem TEXT NOT NULL,
          component TEXT NOT NULL,
          param_name TEXT NOT NULL,
          display_name TEXT NOT NULL,
          display_unit TEXT,
          storage_unit TEXT,
          display_scale TEXT,
          enum_id INTEGER,
          value_type TEXT NOT NULL,
          UNIQUE (instrument_id, param_id)
      );

      CREATE INDEX ON parameters (instrument_id, param_id);

      CREATE TABLE IF NOT EXISTS data (
          time TIMESTAMPTZ NOT NULL,
          instrument_id INTEGER NOT NULL REFERENCES instruments(id),
          param_id INTEGER NOT NULL,
          value_num DOUBLE PRECISION,
          value_text TEXT,
          UNIQUE (time, instrument_id, param_id)
      );

      CREATE INDEX ON data (instrument_id, param_id, time ASC);

      SELECT create_hypertable(
          'data',
          time_column_name := 'time',
          partitioning_column := 'instrument_id',
          number_partitions := 6,
          chunk_time_interval := INTERVAL '1 day',
          if_not_exists := TRUE
      );

      ALTER TABLE data
      SET (
          timescaledb.compress,
          timescaledb.compress_orderby = 'time DESC',
          timescaledb.compress_segmentby = 'instrument_id, param_id'
      );

      SELECT add_compression_policy('data', INTERVAL '3 days');

      GRANT USAGE ON SCHEMA public TO grafana;
      GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana;
EOSQL
done