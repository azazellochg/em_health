\set TBL_DATA_PARTITIONS 6
\set TBL_DATA_CHUNK_INTERVAL '1 day'
\set TBL_DATA_COMPRESSION '3 days'

CREATE EXTENSION IF NOT EXISTS timescaledb;
CREATE EXTENSION IF NOT EXISTS timescaledb_toolkit;
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
CREATE EXTENSION IF NOT EXISTS pgstattuple;

-- public schema ----------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS public.schema_info (
                                                  version int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  updated TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.schema_info IS 'Store the schema version here';

CREATE TABLE IF NOT EXISTS public.instruments (
                                                  id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                  instrument TEXT NOT NULL UNIQUE,
                                                  serial INTEGER NOT NULL UNIQUE,
                                                  model TEXT NOT NULL,
                                                  name TEXT NOT NULL,
                                                  template TEXT NOT NULL,
                                                  server inet,
                                                  ds_version TEXT
);
COMMENT ON TABLE public.instruments IS 'Main instruments table';

CREATE TABLE IF NOT EXISTS public.enumerations (
                                                   instrument_id INTEGER NOT NULL REFERENCES public.instruments(id),
                                                   enum_id INTEGER NOT NULL,
                                                   enum TEXT NOT NULL,
                                                   name TEXT NOT NULL,
                                                   value INTEGER NOT NULL,
                                                   UNIQUE (instrument_id, enum, value)
);
COMMENT ON TABLE public.enumerations IS 'Table to store HM IntEnum parameters';

CREATE INDEX ON public.enumerations (instrument_id, enum, value);

CREATE TABLE IF NOT EXISTS public.parameters (
                                                 instrument_id INTEGER NOT NULL REFERENCES instruments(id),
                                                 param_id INTEGER NOT NULL,
                                                 subsystem TEXT NOT NULL,
                                                 component TEXT NOT NULL,
                                                 param_name TEXT NOT NULL,
                                                 display_name TEXT NOT NULL,
                                                 display_unit TEXT,
                                                 storage_unit TEXT,
                                                 enum_id INTEGER,
                                                 value_type TEXT NOT NULL,
                                                 event_id INTEGER NOT NULL,
                                                 event_name TEXT NOT NULL,
                                                 abs_min DOUBLE PRECISION,
                                                 abs_max DOUBLE PRECISION,
                                                 UNIQUE (instrument_id, param_id)
);
COMMENT ON TABLE public.parameters IS 'Table to store HM parameters metadata. param_id is unique per instrument';

CREATE INDEX ON public.parameters (instrument_id, param_id);

CREATE TABLE IF NOT EXISTS public.parameters_history (
                                                         instrument_id INTEGER NOT NULL REFERENCES public.instruments(id),
                                                         inserted TIMESTAMPTZ NOT NULL DEFAULT now(),
                                                         param_id INTEGER NOT NULL,
                                                         subsystem TEXT NOT NULL,
                                                         component TEXT NOT NULL,
                                                         param_name TEXT NOT NULL,
                                                         display_name TEXT NOT NULL,
                                                         display_unit TEXT,
                                                         storage_unit TEXT,
                                                         enum_id INTEGER,
                                                         value_type TEXT NOT NULL,
                                                         event_id INTEGER NOT NULL,
                                                         event_name TEXT NOT NULL,
                                                         abs_min DOUBLE PRECISION,
                                                         abs_max DOUBLE PRECISION,
                                                         UNIQUE (instrument_id, param_id, inserted)
);
COMMENT ON TABLE public.parameters_history IS 'Table to store historical HM metadata for modified parameters. The records come from the parameters table';

CREATE TABLE IF NOT EXISTS public.data (
                                           time TIMESTAMPTZ NOT NULL,
                                           instrument_id INTEGER NOT NULL REFERENCES public.instruments(id),
                                           param_id INTEGER NOT NULL,
                                           value_num DOUBLE PRECISION,
                                           value_text TEXT,
                                           UNIQUE (time, instrument_id, param_id)
);
COMMENT ON TABLE public.data IS 'Main time series table with HM events';

CREATE INDEX ON public.data (instrument_id, param_id, time ASC);

SELECT create_hypertable(
               'public.data',
               time_column_name := 'time',
               partitioning_column := 'instrument_id',
               number_partitions := :TBL_DATA_PARTITIONS,
               chunk_time_interval := INTERVAL :'TBL_DATA_CHUNK_INTERVAL',
               if_not_exists := TRUE
       );

ALTER TABLE public.data
    SET (
        timescaledb.compress,
        timescaledb.compress_orderby = 'time DESC',
        timescaledb.compress_segmentby = 'instrument_id, param_id'
        );

SELECT add_compression_policy('public.data', INTERVAL :'TBL_DATA_COMPRESSION');

GRANT USAGE ON SCHEMA public TO grafana;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO grafana;

-- uec schema -------------------------------------------------------------------------------------
CREATE SCHEMA IF NOT EXISTS uec;
COMMENT ON SCHEMA uec IS 'Schema to store Unique Error Codes / Alarms';
CREATE TABLE IF NOT EXISTS uec.error_definitions (
                                                     error_definition_id INTEGER PRIMARY KEY,
                                                     subsystem_id INTEGER NOT NULL,
                                                     subsystem TEXT NOT NULL,
                                                     device_type_id INTEGER NOT NULL,
                                                     device_type TEXT NOT NULL,
                                                     device_instance_id INTEGER NOT NULL,
                                                     device_instance TEXT NOT NULL,
                                                     error_code_id INTEGER NOT NULL,
                                                     error_code TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS uec.errors (
                                          time TIMESTAMPTZ NOT NULL,
                                          instrument_id INTEGER NOT NULL REFERENCES public.instruments(id),
                                          error_id INTEGER NOT NULL REFERENCES uec.error_definitions(error_definition_id),
                                          message_text TEXT,
                                          UNIQUE (time, instrument_id, error_id)
);
CREATE INDEX ON uec.errors (instrument_id, time ASC);

GRANT USAGE ON SCHEMA uec TO grafana;
GRANT SELECT ON ALL TABLES IN SCHEMA uec TO grafana;
ALTER DEFAULT PRIVILEGES IN SCHEMA uec GRANT SELECT ON TABLES TO grafana;

-- set schema version
INSERT INTO schema_info (version) VALUES (1);

-- functions and triggers -------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION parameters_upsert_trigger()
RETURNS trigger AS $$
DECLARE
    OLD_ROW public.parameters%ROWTYPE;
BEGIN
    IF EXISTS (
        SELECT 1
        FROM public.parameters p
        WHERE p.instrument_id = NEW.instrument_id
          AND p.param_id = NEW.param_id
    ) THEN
        -- Fetch old row
        SELECT * INTO STRICT OLD_ROW
        FROM public.parameters
        WHERE instrument_id = NEW.instrument_id
          AND param_id = NEW.param_id;

        -- Compare
        IF ROW(OLD_ROW.*) IS DISTINCT FROM ROW(NEW.*) THEN
            INSERT INTO parameters_history (
                instrument_id, param_id, subsystem, component, param_name, display_name,
                display_unit, storage_unit, enum_id, value_type, event_id, event_name,
                abs_min, abs_max
            )
            VALUES (
                       OLD_ROW.instrument_id, OLD_ROW.param_id, OLD_ROW.subsystem, OLD_ROW.component, OLD_ROW.param_name, OLD_ROW.display_name,
                       OLD_ROW.display_unit, OLD_ROW.storage_unit, OLD_ROW.enum_id, OLD_ROW.value_type, OLD_ROW.event_id, OLD_ROW.event_name,
                       OLD_ROW.abs_min, OLD_ROW.abs_max
                   );

            -- Log message
            RAISE NOTICE 'Updating parameter % (instrument %), old values: %, new values: %',
                NEW.param_id, NEW.instrument_id, OLD_ROW, NEW;

            UPDATE public.parameters
            SET subsystem = NEW.subsystem,
                component = NEW.component,
                param_name = NEW.param_name,
                display_name = NEW.display_name,
                display_unit = NEW.display_unit,
                storage_unit = NEW.storage_unit,
                enum_id = NEW.enum_id,
                value_type = NEW.value_type,
                event_id = NEW.event_id,
                event_name = NEW.event_name,
                abs_min = NEW.abs_min,
                abs_max = NEW.abs_max
            WHERE instrument_id = NEW.instrument_id
              AND param_id = NEW.param_id;
        END IF;

        RETURN NULL; -- Skip insert
    ELSE
        RETURN NEW; -- Insert proceeds normally
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER parameters_upsert
BEFORE INSERT ON public.parameters
FOR EACH ROW
EXECUTE FUNCTION parameters_upsert_trigger();
